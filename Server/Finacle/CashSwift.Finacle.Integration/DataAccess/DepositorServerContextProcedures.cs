// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using CashSwift.Finacle.Integration.DataAccess.Entities;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;

namespace CashSwift.Finacle.Integration.DataAccess
{
    public partial class DepositorServerContext
    {
        private IDepositorServerContextProcedures _procedures;

        public virtual IDepositorServerContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DepositorServerContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IDepositorServerContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CheckAccountAgainstAccountPermissionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAccountListByTxTypeIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetCITDenominationByDatesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetDestinationEmailsByAlertTypeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetDeviceConfigByUserGroupResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetDeviceUsersByDeviceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetFailedPostTransactionsByDateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<HashTransactionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<procInsCITPostingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<procInsTransactionPostingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<procUpdCITPostingAuthResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<procUpdTransactionPostingAuthResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SearchAccountResult>().HasNoKey().ToView(null);
        }
    }

    public partial class DepositorServerContextProcedures : IDepositorServerContextProcedures
    {
        private readonly DepositorServerContext _context;

        public DepositorServerContextProcedures(DepositorServerContext context)
        {
            _context = context;
        }

        public virtual async Task<CheckAccountAgainstAccountPermissionResult> CheckAccountAgainstAccountPermissionAsync(int? TxTypeID, string AccountNumber, string Language, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "TxTypeID",
                    Value = TxTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 100,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Language",
                    Size = 5,
                    Value = Language ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CheckAccountAgainstAccountPermissionResult>("EXEC @returnValue = [dbo].[CheckAccountAgainstAccountPermission] @TxTypeID, @AccountNumber, @Language", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _?.FirstOrDefault();
        }

        public virtual async Task<List<GetAccountListByTxTypeIdResult>> GetAccountListByTxTypeIdAsync(int? TxTypeID, int? ListType, int? Skip, int? Take, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "TxTypeID",
                    Value = TxTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ListType",
                    Value = ListType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Skip",
                    Value = Skip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Take",
                    Value = Take ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAccountListByTxTypeIdResult>("EXEC @returnValue = [dbo].[GetAccountListByTxTypeId] @TxTypeID, @ListType, @Skip, @Take", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCITDenominationByDatesResult>> GetCITDenominationByDatesAsync(DateTime? startDate, DateTime? endDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Scale = 7,
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime2,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Scale = 7,
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime2,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCITDenominationByDatesResult>("EXEC @returnValue = [dbo].[GetCITDenominationByDates] @startDate, @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetDestinationEmailsByAlertTypeResult>> GetDestinationEmailsByAlertTypeAsync(int? alertMessageTypeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "alertMessageTypeID",
                    Value = alertMessageTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDestinationEmailsByAlertTypeResult>("EXEC @returnValue = [dbo].[GetDestinationEmailsByAlertType] @alertMessageTypeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetDeviceConfigByUserGroupResult>> GetDeviceConfigByUserGroupAsync(int? ConfigGroup, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "ConfigGroup",
                    Value = ConfigGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDeviceConfigByUserGroupResult>("EXEC @returnValue = [dbo].[GetDeviceConfigByUserGroup] @ConfigGroup", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetDeviceUsersByDeviceResult>> GetDeviceUsersByDeviceAsync(int? Device_UserGroup, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "Device_UserGroup",
                    Value = Device_UserGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDeviceUsersByDeviceResult>("EXEC @returnValue = [dbo].[GetDeviceUsersByDevice] @Device_UserGroup", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetFailedPostTransactionsByDateResult>> GetFailedPostTransactionsByDateAsync(DateTime? StartDate, DateTime? EndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Scale = 7,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime2,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Scale = 7,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime2,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetFailedPostTransactionsByDateResult>("EXEC @returnValue = [dbo].[GetFailedPostTransactionsByDate] @StartDate, @EndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<PingResponse> GetLatestPingRequestAsync(string ServerName, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var sqlParameters = new[]
          {
                new SqlParameter
                {
                    ParameterName = "ServerName",
                    Size = -1,
                    Value = ServerName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            
            var _ = await _context.SqlQueryAsync<PingResponse>("SELECT [ServerName] ,[UpdateTime] ,[IsSuccess] ,[ServerOnline] ,[ErrorCode] ,[ErrorMessage] FROM [cb].[PingResponse] WHERE [ServerName] = @ServerName ORDER BY [UpdateTime] Desc", sqlParameters, cancellationToken);
         
            return _.FirstOrDefault();
        }

        public virtual async Task<List<HashTransactionResult>> HashTransactionAsync(string TxString, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "TxString",
                    Size = -1,
                    Value = TxString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<HashTransactionResult>("EXEC @returnValue = [dbo].[HashTransaction] @TxString", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<procInsCITPostingResult>> procInsCITPostingAsync(int? post_status, Guid? cit_tx_id, string dr_account, string dr_currency, long? dr_amount, string cr_account, string cr_currency, long? cr_amount, string narration, DateTime? init_date, Guid? initialising_user, bool? device_initiated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "post_status",
                    Value = post_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cit_tx_id",
                    Value = cit_tx_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "dr_account",
                    Size = 100,
                    Value = dr_account ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dr_currency",
                    Size = 6,
                    Value = dr_currency ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dr_amount",
                    Value = dr_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "cr_account",
                    Size = 100,
                    Value = cr_account ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cr_currency",
                    Size = 6,
                    Value = cr_currency ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cr_amount",
                    Value = cr_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "narration",
                    Size = 200,
                    Value = narration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "init_date",
                    Scale = 7,
                    Value = init_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime2,
                },
                new SqlParameter
                {
                    ParameterName = "initialising_user",
                    Value = initialising_user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "device_initiated",
                    Value = device_initiated ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<procInsCITPostingResult>("EXEC @returnValue = [dbo].[procInsCITPosting] @post_status, @cit_tx_id, @dr_account, @dr_currency, @dr_amount, @cr_account, @cr_currency, @cr_amount, @narration, @init_date, @initialising_user, @device_initiated", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<procInsTransactionPostingResult>> procInsTransactionPostingAsync(int? post_status, Guid? tx_id, string dr_account, string dr_currency, long? dr_amount, string cr_account, string cr_currency, long? cr_amount, string narration, DateTime? init_date, Guid? initialising_user, bool? device_initiated, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "post_status",
                    Value = post_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tx_id",
                    Value = tx_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "dr_account",
                    Size = 100,
                    Value = dr_account ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dr_currency",
                    Size = 6,
                    Value = dr_currency ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dr_amount",
                    Value = dr_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "cr_account",
                    Size = 100,
                    Value = cr_account ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cr_currency",
                    Size = 6,
                    Value = cr_currency ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cr_amount",
                    Value = cr_amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "narration",
                    Size = 200,
                    Value = narration ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "init_date",
                    Scale = 7,
                    Value = init_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime2,
                },
                new SqlParameter
                {
                    ParameterName = "initialising_user",
                    Value = initialising_user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "device_initiated",
                    Value = device_initiated ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<procInsTransactionPostingResult>("EXEC @returnValue = [dbo].[procInsTransactionPosting] @post_status, @tx_id, @dr_account, @dr_currency, @dr_amount, @cr_account, @cr_currency, @cr_amount, @narration, @init_date, @initialising_user, @device_initiated", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<procUpdCITPostingAuthResult>> procUpdCITPostingAuthAsync(Guid? id, int? post_status, Guid? cit_tx_id, DateTime? auth_date, Guid? authorising_user, int? auth_response, string reason, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "post_status",
                    Value = post_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cit_tx_id",
                    Value = cit_tx_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "auth_date",
                    Scale = 7,
                    Value = auth_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime2,
                },
                new SqlParameter
                {
                    ParameterName = "authorising_user",
                    Value = authorising_user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "auth_response",
                    Value = auth_response ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reason",
                    Size = 200,
                    Value = reason ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<procUpdCITPostingAuthResult>("EXEC @returnValue = [dbo].[procUpdCITPostingAuth] @id, @post_status, @cit_tx_id, @auth_date, @authorising_user, @auth_response, @reason", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<procUpdTransactionPostingAuthResult>> procUpdTransactionPostingAuthAsync(Guid? id, int? post_status, Guid? tx_id, DateTime? auth_date, Guid? authorising_user, int? auth_response, string reason, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "post_status",
                    Value = post_status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tx_id",
                    Value = tx_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "auth_date",
                    Scale = 7,
                    Value = auth_date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime2,
                },
                new SqlParameter
                {
                    ParameterName = "authorising_user",
                    Value = authorising_user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "auth_response",
                    Value = auth_response ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reason",
                    Size = 200,
                    Value = reason ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<procUpdTransactionPostingAuthResult>("EXEC @returnValue = [dbo].[procUpdTransactionPostingAuth] @id, @post_status, @tx_id, @auth_date, @authorising_user, @auth_response, @reason", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SearchAccountResult>> SearchAccountAsync(string SearchText, int? TxTypeID, int? ListType, int? Skip, int? Take, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "SearchText",
                    Size = 304,
                    Value = SearchText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TxTypeID",
                    Value = TxTypeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ListType",
                    Value = ListType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Skip",
                    Value = Skip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Take",
                    Value = Take ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SearchAccountResult>("EXEC @returnValue = [dbo].[SearchAccount] @SearchText, @TxTypeID, @ListType, @Skip, @Take", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
