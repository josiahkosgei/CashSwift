// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace CashSwift.Finacle.Integration.DataAccess.Entities
{
    /// <summary>
    /// Currency enumeration
    /// </summary>
    [Table("Currency")]
    public partial class Currency
    {
        public Currency()
        {
            CITDenominations = new HashSet<CITDenomination>();
            CurrencyList_Currencies = new HashSet<CurrencyList_Currency>();
            CurrencyLists = new HashSet<CurrencyList>();
            DeviceCITSuspenseAccounts = new HashSet<DeviceCITSuspenseAccount>();
            DeviceSuspenseAccounts = new HashSet<DeviceSuspenseAccount>();
            TransactionLimitListItems = new HashSet<TransactionLimitListItem>();
            TransactionTypeListItems = new HashSet<TransactionTypeListItem>();
            Transactions = new HashSet<Transaction>();
        }

        /// <summary>
        /// ISO 4217 Three Character Currency Code
        /// </summary>
        [Key]
        [StringLength(3)]
        [Unicode(false)]
        public string code { get; set; }
        /// <summary>
        /// Name of the currency
        /// </summary>
        [Required]
        [StringLength(50)]
        [Unicode(false)]
        public string name { get; set; }
        /// <summary>
        /// Expresses the relationship between a major currency unit and its corresponding minor currency unit. This mechanism is called the currency &quot;exponent&quot; and assumes a base of 10. Will be used with converters in the GUI
        /// </summary>
        public int minor { get; set; }
        /// <summary>
        /// two character country code for the national flag to display for the language
        /// </summary>
        [Required]
        [StringLength(2)]
        [Unicode(false)]
        public string flag { get; set; }
        /// <summary>
        /// whether the system supports the language
        /// </summary>
        public bool enabled { get; set; }
        [StringLength(3)]
        [Unicode(false)]
        public string ISO_3_Numeric_Code { get; set; }

        [InverseProperty("currency")]
        public virtual ICollection<CITDenomination> CITDenominations { get; set; }
        [InverseProperty("currency_itemNavigation")]
        public virtual ICollection<CurrencyList_Currency> CurrencyList_Currencies { get; set; }
        [InverseProperty("default_currencyNavigation")]
        public virtual ICollection<CurrencyList> CurrencyLists { get; set; }
        [InverseProperty("currency_codeNavigation")]
        public virtual ICollection<DeviceCITSuspenseAccount> DeviceCITSuspenseAccounts { get; set; }
        [InverseProperty("currency_codeNavigation")]
        public virtual ICollection<DeviceSuspenseAccount> DeviceSuspenseAccounts { get; set; }
        [InverseProperty("currency_codeNavigation")]
        public virtual ICollection<TransactionLimitListItem> TransactionLimitListItems { get; set; }
        [InverseProperty("default_account_currencyNavigation")]
        public virtual ICollection<TransactionTypeListItem> TransactionTypeListItems { get; set; }
        [InverseProperty("tx_currencyNavigation")]
        public virtual ICollection<Transaction> Transactions { get; set; }
    }
}