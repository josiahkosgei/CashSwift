// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace CashSwift.Finacle.Integration.DataAccess.Entities
{
    /// <summary>
    /// Stores the summary of a transaction attempt. A transaction can have various stages of completion if an error is encountered.
    /// </summary>
    [Table("Transaction")]
    [Index("auth_user", Name = "iauth_user_Transaction")]
    [Index("cit_id", Name = "icit_id_Transaction")]
    [Index("device_id", Name = "idevice_Transaction")]
    [Index("init_user", Name = "iinit_user_Transaction")]
    [Index("session_id", Name = "isession_id_Transaction")]
    [Index("tx_currency", Name = "itx_currency_Transaction")]
    [Index("tx_type", Name = "itx_type_Transaction")]
    public partial class Transaction
    {
        public Transaction()
        {
            DenominationDetails = new HashSet<DenominationDetail>();
            EscrowJams = new HashSet<EscrowJam>();
            Printouts = new HashSet<Printout>();
            TransactionPostings = new HashSet<TransactionPosting>();
        }

        /// <summary>
        /// Globally Unique Identifier for replication
        /// </summary>
        [Key]
        public Guid id { get; set; }
        /// <summary>
        /// The transaction type chosen by the user from TransactionTypeListItem
        /// </summary>
        public int? tx_type { get; set; }
        /// <summary>
        /// The session this transaction fullfills
        /// </summary>
        public Guid session_id { get; set; }
        public int? tx_random_number { get; set; }
        public Guid device_id { get; set; }
        /// <summary>
        /// The date and time the transaction was recorded in the database. Can be different from core banking&apos;s transaction date
        /// </summary>
        public DateTime tx_start_date { get; set; }
        /// <summary>
        /// The date and time the transaction was recorded in the database. Can be different from core banking&apos;s transaction date
        /// </summary>
        public DateTime? tx_end_date { get; set; }
        /// <summary>
        /// Indicate if the transaction has completed or is in progress
        /// </summary>
        public bool tx_completed { get; set; }
        /// <summary>
        /// User selected currency. A transaction can only have one currency at a time
        /// </summary>
        [StringLength(3)]
        [Unicode(false)]
        public string tx_currency { get; set; }
        public long? tx_amount { get; set; }
        /// <summary>
        /// Account Number for crediting. This can be a suspense account
        /// </summary>
        [StringLength(50)]
        public string tx_account_number { get; set; }
        /// <summary>
        /// The account name returned by core banking.
        /// </summary>
        [StringLength(100)]
        public string cb_account_name { get; set; }
        /// <summary>
        /// Used for double validation transactions where the user enters a second account number. E.g Mpesa Agent Number
        /// </summary>
        [StringLength(50)]
        public string tx_ref_account { get; set; }
        /// <summary>
        /// Core banking returned Reference Account Name if any following a validation request for a Reference Account Number
        /// </summary>
        [StringLength(100)]
        public string cb_ref_account_name { get; set; }
        /// <summary>
        /// The narration from the deposit slip. Usually set to 16 characters in core banking
        /// </summary>
        [StringLength(50)]
        public string tx_narration { get; set; }
        /// <summary>
        /// Customer&apos;s name
        /// </summary>
        [StringLength(50)]
        public string tx_depositor_name { get; set; }
        /// <summary>
        /// Customer&apos;s ID number
        /// </summary>
        [StringLength(50)]
        public string tx_id_number { get; set; }
        /// <summary>
        /// Customer entered phone number
        /// </summary>
        [StringLength(50)]
        public string tx_phone { get; set; }
        [StringLength(255)]
        public string funds_source { get; set; }
        /// <summary>
        /// Boolean for if the transaction succeeded 100% without encountering a critical terminating error
        /// </summary>
        public int tx_result { get; set; }
        /// <summary>
        /// Last error code encountered during the transaction
        /// </summary>
        public int tx_error_code { get; set; }
        /// <summary>
        /// Last error message encountered during the transaction
        /// </summary>
        [StringLength(255)]
        public string tx_error_message { get; set; }
        /// <summary>
        /// Core banking returned transaction number
        /// </summary>
        [StringLength(50)]
        public string cb_tx_number { get; set; }
        /// <summary>
        /// Core banking returned transaction date and time
        /// </summary>
        public DateTime? cb_date { get; set; }
        /// <summary>
        /// Core banking returned transaction status e.g. SUCCESS or FAILURE
        /// </summary>
        [StringLength(50)]
        public string cb_tx_status { get; set; }
        /// <summary>
        /// Additional status details returned by core banking e.g. &apos;Amount must be less that MAX_AMOUNT&apos;
        /// </summary>
        public string cb_status_detail { get; set; }
        public bool notes_rejected { get; set; }
        public bool jam_detected { get; set; }
        public Guid? cit_id { get; set; }
        public bool escrow_jam { get; set; }
        [StringLength(50)]
        public string tx_suspense_account { get; set; }
        public Guid? init_user { get; set; }
        public Guid? auth_user { get; set; }

        [ForeignKey("auth_user")]
        [InverseProperty("Transactionauth_userNavigations")]
        public virtual ApplicationUser auth_userNavigation { get; set; }
        [ForeignKey("cit_id")]
        [InverseProperty("Transactions")]
        public virtual CIT cit { get; set; }
        [ForeignKey("device_id")]
        [InverseProperty("Transactions")]
        public virtual Device device { get; set; }
        [ForeignKey("init_user")]
        [InverseProperty("Transactioninit_userNavigations")]
        public virtual ApplicationUser init_userNavigation { get; set; }
        [ForeignKey("session_id")]
        [InverseProperty("Transactions")]
        public virtual DepositorSession session { get; set; }
        [ForeignKey("tx_currency")]
        [InverseProperty("Transactions")]
        public virtual Currency tx_currencyNavigation { get; set; }
        [ForeignKey("tx_type")]
        [InverseProperty("Transactions")]
        public virtual TransactionTypeListItem tx_typeNavigation { get; set; }
        [InverseProperty("tx")]
        public virtual ICollection<DenominationDetail> DenominationDetails { get; set; }
        [InverseProperty("transaction")]
        public virtual ICollection<EscrowJam> EscrowJams { get; set; }
        [InverseProperty("tx")]
        public virtual ICollection<Printout> Printouts { get; set; }
        [InverseProperty("tx")]
        public virtual ICollection<TransactionPosting> TransactionPostings { get; set; }
    }
}