// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Metadata;
using CashSwift.Finacle.Integration.DataAccess.Entities;
using ApplicationException = CashSwift.Finacle.Integration.DataAccess.Entities.ApplicationException;
using System.Data;
using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Configuration;
using Microsoft.EntityFrameworkCore;

namespace CashSwift.Finacle.Integration.DataAccess
{
    public partial class DepositorServerContext : DbContext
    {
        public DepositorServerContext()
        {
        }

        public DepositorServerContext(DbContextOptions<DepositorServerContext> options)
            : base(options)
        {
        }

        public virtual DbSet<APIUser> APIUsers { get; set; }
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<AccountLedgerItem> AccountLedgerItems { get; set; }
        public virtual DbSet<AccountPermission> AccountPermissions { get; set; }
        public virtual DbSet<AccountPermissionItem> AccountPermissionItems { get; set; }
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<AlertAttachmentType> AlertAttachmentTypes { get; set; }
        public virtual DbSet<AlertEmail> AlertEmails { get; set; }
        public virtual DbSet<AlertEmailAttachment> AlertEmailAttachments { get; set; }
        public virtual DbSet<AlertEvent> AlertEvents { get; set; }
        public virtual DbSet<AlertMessageRegistry> AlertMessageRegistries { get; set; }
        public virtual DbSet<AlertMessageType> AlertMessageTypes { get; set; }
        public virtual DbSet<AlertSM> AlertSMs { get; set; }
        public virtual DbSet<ApplicationException> ApplicationExceptions { get; set; }
        public virtual DbSet<ApplicationLog> ApplicationLogs { get; set; }
        public virtual DbSet<ApplicationUser> ApplicationUsers { get; set; }
        public virtual DbSet<ApplicationUserChangePassword> ApplicationUserChangePasswords { get; set; }
        public virtual DbSet<ApplicationUserLoginDetail> ApplicationUserLoginDetails { get; set; }
        public virtual DbSet<AuditDataItemPersistent> AuditDataItemPersistents { get; set; }
        public virtual DbSet<AuditedObjectWeakReference> AuditedObjectWeakReferences { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<CIT> CITs { get; set; }
        public virtual DbSet<CITDenomination> CITDenominations { get; set; }
        public virtual DbSet<CITPosting> CITPostings { get; set; }
        public virtual DbSet<CITPrintout> CITPrintouts { get; set; }
        public virtual DbSet<CITTransaction> CITTransactions { get; set; }
        public virtual DbSet<CashSwiftCommunicationServiceStatus> CashSwiftCommunicationServiceStatuses { get; set; }
        public virtual DbSet<Config> Configs { get; set; }
        public virtual DbSet<ConfigCategory> ConfigCategories { get; set; }
        public virtual DbSet<ConfigGroup> ConfigGroups { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CrashEvent> CrashEvents { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<CurrencyList> CurrencyLists { get; set; }
        public virtual DbSet<CurrencyList_Currency> CurrencyList_Currencies { get; set; }
        public virtual DbSet<DashboardDatum> DashboardData { get; set; }
        public virtual DbSet<DenominationDetail> DenominationDetails { get; set; }
        public virtual DbSet<DenominationView> DenominationViews { get; set; }
        public virtual DbSet<DepositorSession> DepositorSessions { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<DeviceCITSuspenseAccount> DeviceCITSuspenseAccounts { get; set; }
        public virtual DbSet<DeviceConfig> DeviceConfigs { get; set; }
        public virtual DbSet<DeviceLock> DeviceLocks { get; set; }
        public virtual DbSet<DeviceLogin> DeviceLogins { get; set; }
        public virtual DbSet<DevicePrinter> DevicePrinters { get; set; }
        public virtual DbSet<DeviceStatus> DeviceStatuses { get; set; }
        public virtual DbSet<DeviceSuspenseAccount> DeviceSuspenseAccounts { get; set; }
        public virtual DbSet<DeviceType> DeviceTypes { get; set; }
        public virtual DbSet<EscrowJam> EscrowJams { get; set; }
        public virtual DbSet<FailedTransactionResult> FailedTransactionResults { get; set; }
        public virtual DbSet<GUIPrepopItem> GUIPrepopItems { get; set; }
        public virtual DbSet<GUIPrepopList> GUIPrepopLists { get; set; }
        public virtual DbSet<GUIPrepopList_Item> GUIPrepopList_Items { get; set; }
        public virtual DbSet<GUIScreen> GUIScreens { get; set; }
        public virtual DbSet<GUIScreenList> GUIScreenLists { get; set; }
        public virtual DbSet<GUIScreenText> GUIScreenTexts { get; set; }
        public virtual DbSet<GUIScreenType> GUIScreenTypes { get; set; }
        public virtual DbSet<GuiScreenList_Screen> GuiScreenList_Screens { get; set; }
        public virtual DbSet<KeyStore> KeyStores { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LanguageList> LanguageLists { get; set; }
        public virtual DbSet<LanguageList_Language> LanguageList_Languages { get; set; }
        public virtual DbSet<MakerCheckerAction> MakerCheckerActions { get; set; }
        public virtual DbSet<MakerTypePermissionObject> MakerTypePermissionObjects { get; set; }
        public virtual DbSet<ModelDifference> ModelDifferences { get; set; }
        public virtual DbSet<ModelDifferenceAspect> ModelDifferenceAspects { get; set; }
        public virtual DbSet<PasswordHistory> PasswordHistories { get; set; }
        public virtual DbSet<PasswordPolicy> PasswordPolicies { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<PermissionPolicyMemberPermissionsObject> PermissionPolicyMemberPermissionsObjects { get; set; }
        public virtual DbSet<PermissionPolicyNavigationPermissionsObject> PermissionPolicyNavigationPermissionsObjects { get; set; }
        public virtual DbSet<PermissionPolicyObjectPermissionsObject> PermissionPolicyObjectPermissionsObjects { get; set; }
        public virtual DbSet<PermissionPolicyRole> PermissionPolicyRoles { get; set; }
        public virtual DbSet<PermissionPolicyTypePermissionsObject> PermissionPolicyTypePermissionsObjects { get; set; }
        public virtual DbSet<PermissionPolicyUser> PermissionPolicyUsers { get; set; }
        public virtual DbSet<PermissionPolicyUserUsers_PermissionPolicyRoleRole> PermissionPolicyUserUsers_PermissionPolicyRoleRoles { get; set; }
        public virtual DbSet<PingResponse> PingResponses { get; set; }
        public virtual DbSet<PostRequest> PostRequests { get; set; }
        public virtual DbSet<PostResponse> PostResponses { get; set; }
        public virtual DbSet<PrinterStatus> PrinterStatuses { get; set; }
        public virtual DbSet<Printout> Printouts { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<SMSRequest> SMSRequests { get; set; }
        public virtual DbSet<SMSResponse> SMSResponses { get; set; }
        public virtual DbSet<SessionException> SessionExceptions { get; set; }
        public virtual DbSet<TextItem> TextItems { get; set; }
        public virtual DbSet<TextItemCategory> TextItemCategories { get; set; }
        public virtual DbSet<TextItemType> TextItemTypes { get; set; }
        public virtual DbSet<TextTranslation> TextTranslations { get; set; }
        public virtual DbSet<ThisDevice> ThisDevices { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<TransactionException> TransactionExceptions { get; set; }
        public virtual DbSet<TransactionLimitList> TransactionLimitLists { get; set; }
        public virtual DbSet<TransactionLimitListItem> TransactionLimitListItems { get; set; }
        public virtual DbSet<TransactionPosting> TransactionPostings { get; set; }
        public virtual DbSet<TransactionText> TransactionTexts { get; set; }
        public virtual DbSet<TransactionType> TransactionTypes { get; set; }
        public virtual DbSet<TransactionTypeList> TransactionTypeLists { get; set; }
        public virtual DbSet<TransactionTypeListItem> TransactionTypeListItems { get; set; }
        public virtual DbSet<TransactionTypeList_TransactionTypeListItem> TransactionTypeList_TransactionTypeListItems { get; set; }
        public virtual DbSet<TransactionView> TransactionViews { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
        public virtual DbSet<UserLock> UserLocks { get; set; }
        public virtual DbSet<ValidateAccountRequest> ValidateAccountRequests { get; set; }
        public virtual DbSet<ValidateAccountResponse> ValidateAccountResponses { get; set; }
        public virtual DbSet<ValidateReferenceAccountRequest> ValidateReferenceAccountRequests { get; set; }
        public virtual DbSet<ValidateReferenceAccountResponse> ValidateReferenceAccountResponses { get; set; }
        public virtual DbSet<ValidationItem> ValidationItems { get; set; }
        public virtual DbSet<ValidationItemValue> ValidationItemValues { get; set; }
        public virtual DbSet<ValidationList> ValidationLists { get; set; }
        public virtual DbSet<ValidationList_ValidationItem> ValidationList_ValidationItems { get; set; }
        public virtual DbSet<ValidationText> ValidationTexts { get; set; }
        public virtual DbSet<ValidationType> ValidationTypes { get; set; }
        public virtual DbSet<WebPortalLogin> WebPortalLogins { get; set; }
        public virtual DbSet<WebPortalRole> WebPortalRoles { get; set; }
        public virtual DbSet<WebPortalRoleRoles_ApplicationUserApplicationUser> WebPortalRoleRoles_ApplicationUserApplicationUsers { get; set; }
        public virtual DbSet<WebUserLoginCount> WebUserLoginCounts { get; set; }
        public virtual DbSet<WebUserPasswordHistory> WebUserPasswordHistories { get; set; }
        public virtual DbSet<XPObjectType> XPObjectTypes { get; set; }
        public virtual DbSet<XPWeakReference> XPWeakReferences { get; set; }
        public virtual DbSet<sysTextItem> sysTextItems { get; set; }
        public virtual DbSet<sysTextItemCategory> sysTextItemCategories { get; set; }
        public virtual DbSet<sysTextItemType> sysTextItemTypes { get; set; }
        public virtual DbSet<sysTextTranslation> sysTextTranslations { get; set; }
        public virtual DbSet<viewCITRepostAuthPending> viewCITRepostAuthPendings { get; set; }
        public virtual DbSet<viewCITRepostFailedPostTransaction> viewCITRepostFailedPostTransactions { get; set; }
        public virtual DbSet<viewConfig> viewConfigs { get; set; }
        public virtual DbSet<viewPermission> viewPermissions { get; set; }
        public virtual DbSet<viewRepostAuthPending> viewRepostAuthPendings { get; set; }
        public virtual DbSet<viewRepostFailedPostTransaction> viewRepostFailedPostTransactions { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<APIUser>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();

                entity.Property(e => e.AppKey).IsFixedLength();
            });

            modelBuilder.Entity<Account>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();
            });

            modelBuilder.Entity<AccountLedgerItem>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();
            });

            modelBuilder.Entity<AccountPermission>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();

                entity.HasOne(d => d.tx_typeNavigation)
                    .WithOne(p => p.AccountPermission)
                    .HasForeignKey<AccountPermission>(d => d.tx_type)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountPermission_TransactionTypeListItem");
            });

            modelBuilder.Entity<AccountPermissionItem>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();

                entity.HasOne(d => d.accountNavigation)
                    .WithMany(p => p.AccountPermissionItems)
                    .HasForeignKey(d => d.account)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountPermissionItem_Account");

                entity.HasOne(d => d.account_permissionNavigation)
                    .WithMany(p => p.AccountPermissionItems)
                    .HasForeignKey(d => d.account_permission)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountPermissionItem_AccountPermission");
            });

            modelBuilder.Entity<Activity>(entity =>
            {
                entity.HasComment("a task a user needs permission to perform");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.description).HasComment("Short description of the activity being performed");

                entity.Property(e => e.name).HasComment("The name of the activity. will be used in lookups");
            });

            modelBuilder.Entity<AlertEmail>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.created).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.alert_event)
                    .WithMany(p => p.AlertEmails)
                    .HasForeignKey(d => d.alert_event_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AlertEmail_AlertEmailEvent");
            });

            modelBuilder.Entity<AlertEmailAttachment>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.hash).IsFixedLength();

                entity.Property(e => e.type).IsFixedLength();
            });

            modelBuilder.Entity<AlertEvent>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.created).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.alert_event)
                    .WithMany(p => p.Inversealert_event)
                    .HasForeignKey(d => d.alert_event_id)
                    .HasConstraintName("FK_AlertEmailEvent_AlertEmailEvent");
            });

            modelBuilder.Entity<AlertMessageRegistry>(entity =>
            {
                entity.HasComment("Register a role to receive an alert");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.alert_type_id).HasComment("The type of alert the role can receive");

                entity.Property(e => e.email_enabled)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Can the role receive email");

                entity.Property(e => e.phone_enabled).HasComment("Can the role receive an SMS message for the alert message type");

                entity.Property(e => e.role_id).HasComment("The role that will be given rights to the AlertMssage type");

                entity.HasOne(d => d.alert_type)
                    .WithMany(p => p.AlertMessageRegistries)
                    .HasForeignKey(d => d.alert_type_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AlertMessageRegistry_AlertMessageType");

                entity.HasOne(d => d.role)
                    .WithMany(p => p.AlertMessageRegistries)
                    .HasForeignKey(d => d.role_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AlertMessageRegistry_Role");
            });

            modelBuilder.Entity<AlertMessageType>(entity =>
            {
                entity.HasComment("Types of messages for alerts sent via email or phone");

                entity.Property(e => e.id).ValueGeneratedNever();

                entity.Property(e => e.email_content_template).HasComment("The HTML template that will be merged into later");

                entity.Property(e => e.enabled)
                    .HasDefaultValueSql("((1))")
                    .HasComment("whether or not the alert message type in enabled and can be instantiated");

                entity.Property(e => e.name).HasComment("Name of the AlertMessage");

                entity.Property(e => e.phone_content_template).HasComment("The SMS template that will be merged into later");

                entity.Property(e => e.raw_email_content_template).HasComment("The raw text template that will be merged into later");

                entity.Property(e => e.title).HasComment("Title displayed in th eheader sction of messages");
            });

            modelBuilder.Entity<AlertSM>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.created).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.alert_event)
                    .WithMany(p => p.AlertSMs)
                    .HasForeignKey(d => d.alert_event_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AlertSMS_AlertEvent");
            });

            modelBuilder.Entity<ApplicationException>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");
            });

            modelBuilder.Entity<ApplicationLog>(entity =>
            {
                entity.HasComment("Stores the general application log that the GUI and other local systems write to");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.component).HasComment("Which internal component produced the log entry e.g. GUI, APIs, DeviceController etc");

                entity.Property(e => e.event_detail).HasComment("the details of the log message");

                entity.Property(e => e.event_name).HasComment("The name of the log event");

                entity.Property(e => e.event_type).HasComment("the type of the log event used for grouping and sorting");

                entity.Property(e => e.log_date).HasComment("Datetime the system deems for the log entry.");

                entity.Property(e => e.log_level).HasComment("the LogLevel");

                entity.Property(e => e.session_id).HasComment("The session this log entry belongs to");
            });

            modelBuilder.Entity<ApplicationUser>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.email).HasComment("user email address, used to receive emails from the system");

                entity.Property(e => e.email_enabled)
                    .HasDefaultValueSql("((1))")
                    .HasComment("whether or not the user is allowed to receive emails");

                entity.Property(e => e.fname).HasComment("First names");

                entity.Property(e => e.lname).HasComment("Last name");

                entity.Property(e => e.login_attempts).HasComment("how many unsuccessful login attempts has the user mad in a row. used to lock the user automatically");

                entity.Property(e => e.password)
                    .IsFixedLength()
                    .HasComment("salted and hashed password utilising a password library");

                entity.Property(e => e.password_reset_required).HasComment("should the user rset their password at their next login");

                entity.Property(e => e.phone).HasComment("the phone number for the user to rceive SMSes from the system");

                entity.Property(e => e.phone_enabled).HasComment("can the user receive SMSes from the system");

                entity.Property(e => e.role_id).HasComment("The role the user has e.g. Custodian, Branch Manager tc");

                entity.Property(e => e.username).HasComment("username for logging into the system");

                entity.HasOne(d => d.ApplicationUserLoginDetailNavigation)
                    .WithMany(p => p.ApplicationUsers)
                    .HasForeignKey(d => d.ApplicationUserLoginDetail)
                    .HasConstraintName("FK_ApplicationUser_ApplicationUserLoginDetail");

                entity.HasOne(d => d.role)
                    .WithMany(p => p.ApplicationUsers)
                    .HasForeignKey(d => d.role_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationUser_Role");

                entity.HasOne(d => d.user_groupNavigation)
                    .WithMany(p => p.ApplicationUsers)
                    .HasForeignKey(d => d.user_group)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApplicationUser_UserGroup");
            });

            modelBuilder.Entity<ApplicationUserChangePassword>(entity =>
            {
                entity.Property(e => e.Oid).ValueGeneratedNever();

                entity.HasOne(d => d.PasswordPolicyNavigation)
                    .WithMany(p => p.ApplicationUserChangePasswords)
                    .HasForeignKey(d => d.PasswordPolicy)
                    .HasConstraintName("FK_ApplicationUserChangePassword_PasswordPolicy");

                entity.HasOne(d => d.UserNavigation)
                    .WithMany(p => p.ApplicationUserChangePasswords)
                    .HasForeignKey(d => d.User)
                    .HasConstraintName("FK_ApplicationUserChangePassword_User");
            });

            modelBuilder.Entity<ApplicationUserLoginDetail>(entity =>
            {
                entity.Property(e => e.Oid).ValueGeneratedNever();

                entity.HasOne(d => d.LastLoginLogEntryNavigation)
                    .WithMany(p => p.ApplicationUserLoginDetails)
                    .HasForeignKey(d => d.LastLoginLogEntry)
                    .HasConstraintName("FK_ApplicationUserLoginDetail_LastLoginLogEntry");

                entity.HasOne(d => d.UserNavigation)
                    .WithMany(p => p.ApplicationUserLoginDetails)
                    .HasForeignKey(d => d.User)
                    .HasConstraintName("FK_ApplicationUserLoginDetail_User");
            });

            modelBuilder.Entity<AuditDataItemPersistent>(entity =>
            {
                entity.Property(e => e.Oid).ValueGeneratedNever();

                entity.HasOne(d => d.AuditedObjectNavigation)
                    .WithMany(p => p.AuditDataItemPersistents)
                    .HasForeignKey(d => d.AuditedObject)
                    .HasConstraintName("FK_AuditDataItemPersistent_AuditedObject");

                entity.HasOne(d => d.NewObjectNavigation)
                    .WithMany(p => p.AuditDataItemPersistentNewObjectNavigations)
                    .HasForeignKey(d => d.NewObject)
                    .HasConstraintName("FK_AuditDataItemPersistent_NewObject");

                entity.HasOne(d => d.OldObjectNavigation)
                    .WithMany(p => p.AuditDataItemPersistentOldObjectNavigations)
                    .HasForeignKey(d => d.OldObject)
                    .HasConstraintName("FK_AuditDataItemPersistent_OldObject");
            });

            modelBuilder.Entity<AuditedObjectWeakReference>(entity =>
            {
                entity.Property(e => e.Oid).ValueGeneratedNever();

                entity.HasOne(d => d.OidNavigation)
                    .WithOne(p => p.AuditedObjectWeakReference)
                    .HasForeignKey<AuditedObjectWeakReference>(d => d.Oid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AuditedObjectWeakReference_Oid");
            });

            modelBuilder.Entity<Bank>(entity =>
            {
                entity.HasComment("The bank that owns the depositor");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.country_code).IsFixedLength();

                entity.HasOne(d => d.country_codeNavigation)
                    .WithMany(p => p.Banks)
                    .HasForeignKey(d => d.country_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bank_Country");
            });

            modelBuilder.Entity<Branch>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.HasOne(d => d.bank)
                    .WithMany(p => p.Branches)
                    .HasForeignKey(d => d.bank_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Branch_Bank");
            });

            modelBuilder.Entity<CIT>(entity =>
            {
                entity.HasComment("store a CIT transaction");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.auth_user).HasComment("Application User who authorised the CIT event");

                entity.Property(e => e.cit_complete_date).HasComment("Datetime when the CIT was completed");

                entity.Property(e => e.cit_date)
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Datetime of the CIT");

                entity.Property(e => e.cit_error).HasComment("The error code encountered during CIT");

                entity.Property(e => e.cit_error_message).HasComment("Error message encounterd during CIT");

                entity.Property(e => e.complete).HasComment("Has the CIT been completed, used for calculating incomplete CITs");

                entity.Property(e => e.device_id).HasComment("Device that conducted the CIT");

                entity.Property(e => e.fromDate).HasComment("The datetime from which the CIT calculations will be carrid out");

                entity.Property(e => e.new_bag_number).HasComment("The asset number of the empty bag that was inserted");

                entity.Property(e => e.old_bag_number).HasComment("The asset number of the Bag that was removed i.e. the full bag");

                entity.Property(e => e.seal_number).HasComment("The numbr on the tamper evident seal tag used to seal the bag");

                entity.Property(e => e.start_user).HasComment("ApplicationUser who initiated the CIT");

                entity.Property(e => e.toDate).HasComment("The datetime until which the CIT calculations will be carrid out");

                entity.HasOne(d => d.auth_userNavigation)
                    .WithMany(p => p.CITauth_userNavigations)
                    .HasForeignKey(d => d.auth_user)
                    .HasConstraintName("FK_CIT_ApplicationUser_AuthUser");

                entity.HasOne(d => d.device)
                    .WithMany(p => p.CITs)
                    .HasForeignKey(d => d.device_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CIT_DeviceList");

                entity.HasOne(d => d.start_userNavigation)
                    .WithMany(p => p.CITstart_userNavigations)
                    .HasForeignKey(d => d.start_user)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CIT_ApplicationUser_StartUser");
            });

            modelBuilder.Entity<CITDenomination>(entity =>
            {
                entity.HasComment("currency and deomination breakdown of the CIT bag");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.cit_id).HasComment("The CIT the record belongs to");

                entity.Property(e => e.count).HasComment("How many of the denomination were counted");

                entity.Property(e => e.currency_id)
                    .IsFixedLength()
                    .HasComment("The currency code");

                entity.Property(e => e.datetime).HasComment("When this item was recorded");

                entity.Property(e => e.denom).HasComment("denomination of note or coin in major currency");

                entity.Property(e => e.subtotal).HasComment("The subtotal of the denomination calculated as denom*count");

                entity.HasOne(d => d.cit)
                    .WithMany(p => p.CITDenominations)
                    .HasForeignKey(d => d.cit_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CITDenominations_CIT");

                entity.HasOne(d => d.currency)
                    .WithMany(p => p.CITDenominations)
                    .HasForeignKey(d => d.currency_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CITDenominations_Currency");
            });

            modelBuilder.Entity<CITPosting>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();

                entity.Property(e => e.cr_currency).IsFixedLength();

                entity.Property(e => e.dr_currency).IsFixedLength();

                entity.HasOne(d => d.authorising_userNavigation)
                    .WithMany(p => p.CITPostingauthorising_userNavigations)
                    .HasForeignKey(d => d.authorising_user)
                    .HasConstraintName("FK_CITPosting_authorising_user");

                entity.HasOne(d => d.cit_tx)
                    .WithMany(p => p.CITPostings)
                    .HasForeignKey(d => d.cit_tx_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CITPosting_CIT");

                entity.HasOne(d => d.initialising_userNavigation)
                    .WithMany(p => p.CITPostinginitialising_userNavigations)
                    .HasForeignKey(d => d.initialising_user)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CITPosting_initialising_user");
            });

            modelBuilder.Entity<CITPrintout>(entity =>
            {
                entity.HasComment("Stores CIT receipts");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.cit_id).HasComment("The CIT this rceipt belongs to");

                entity.Property(e => e.datetime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.is_copy).HasComment("Is this CIT Receipt a copy, used for marking duplicate receipts");

                entity.Property(e => e.print_content).HasComment("Text of the receipt");

                entity.Property(e => e.print_guid).HasComment("Receipt SHA512 hash");

                entity.HasOne(d => d.cit)
                    .WithMany(p => p.CITPrintouts)
                    .HasForeignKey(d => d.cit_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CITPrintout_CIT");
            });

            modelBuilder.Entity<CITTransaction>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.currency).IsFixedLength();

                entity.HasOne(d => d.cit)
                    .WithMany(p => p.CITTransactions)
                    .HasForeignKey(d => d.cit_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CITTransaction_CIT");
            });

            modelBuilder.Entity<CashSwiftCommunicationServiceStatus>(entity =>
            {
                entity.HasComment("status of the communication service for email, sms etc");

                entity.Property(e => e.modified).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Config>(entity =>
            {
                entity.HasComment("Configuration list");

                entity.HasOne(d => d.category)
                    .WithMany(p => p.Configs)
                    .HasForeignKey(d => d.category_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Config_ConfigCategory");
            });

            modelBuilder.Entity<ConfigCategory>(entity =>
            {
                entity.HasComment("Categorisation of configuration opions");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.name).HasComment("Name of the AlertMessage");
            });

            modelBuilder.Entity<ConfigGroup>(entity =>
            {
                entity.HasComment("Group together configurations so devices can share configs");

                entity.HasOne(d => d.parent_groupNavigation)
                    .WithMany(p => p.Inverseparent_groupNavigation)
                    .HasForeignKey(d => d.parent_group)
                    .HasConstraintName("FK_ConfigGroup_ConfigGroup");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.Property(e => e.country_code)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.country_name).HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<CrashEvent>(entity =>
            {
                entity.HasComment("contains a crash report");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.HasComment("Currency enumeration");

                entity.Property(e => e.code)
                    .IsFixedLength()
                    .HasComment("ISO 4217 Three Character Currency Code");

                entity.Property(e => e.ISO_3_Numeric_Code).IsFixedLength();

                entity.Property(e => e.enabled).HasComment("whether the system supports the language");

                entity.Property(e => e.flag)
                    .IsFixedLength()
                    .HasComment("two character country code for the national flag to display for the language");

                entity.Property(e => e.minor).HasComment("Expresses the relationship between a major currency unit and its corresponding minor currency unit. This mechanism is called the currency \"exponent\" and assumes a base of 10. Will be used with converters in the GUI");

                entity.Property(e => e.name).HasComment("Name of the currency");
            });

            modelBuilder.Entity<CurrencyList>(entity =>
            {
                entity.HasComment("Enumeration of allowed Currencies. A device can then associate with a currency list");

                entity.Property(e => e.default_currency).IsFixedLength();

                entity.HasOne(d => d.default_currencyNavigation)
                    .WithMany(p => p.CurrencyLists)
                    .HasForeignKey(d => d.default_currency)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CurrencyList_Currency");
            });

            modelBuilder.Entity<CurrencyList_Currency>(entity =>
            {
                entity.HasComment("[m2m] Currency and CurrencyList");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.currency_item)
                    .IsFixedLength()
                    .HasComment("The currency in the list");

                entity.Property(e => e.currency_list).HasComment("The Currency list to which the currency is associated");

                entity.Property(e => e.currency_order).HasComment("ASC Order of sorting for currencies in list.");

                entity.HasOne(d => d.currency_itemNavigation)
                    .WithMany(p => p.CurrencyList_Currencies)
                    .HasForeignKey(d => d.currency_item)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Currency_CurrencyList_Currency");

                entity.HasOne(d => d.currency_listNavigation)
                    .WithMany(p => p.CurrencyList_Currencies)
                    .HasForeignKey(d => d.currency_list)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Currency_CurrencyList_CurrencyList");
            });

            modelBuilder.Entity<DashboardDatum>(entity =>
            {
                entity.Property(e => e.Oid).ValueGeneratedNever();
            });

            modelBuilder.Entity<DenominationDetail>(entity =>
            {
                entity.HasComment("Denomination enumeration for a Transaction");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.count).HasComment("How many of the denomination were counted");

                entity.Property(e => e.denom).HasComment("denomination of note or coin in major currency");

                entity.Property(e => e.subtotal).HasComment("The subtotal of the denomination calculated as denom*count");

                entity.HasOne(d => d.tx)
                    .WithMany(p => p.DenominationDetails)
                    .HasForeignKey(d => d.tx_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DenominationDetail_Transaction");
            });

            modelBuilder.Entity<DenominationView>(entity =>
            {
                entity.ToView("DenominationView");
            });

            modelBuilder.Entity<DepositorSession>(entity =>
            {
                entity.HasComment("Stores details of a customer deposit session. Asuccessful session ends in a successful transaction");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.language_code).IsFixedLength();

                entity.HasOne(d => d.device)
                    .WithMany(p => p.DepositorSessions)
                    .HasForeignKey(d => d.device_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DepositorSession_DeviceList");

                entity.HasOne(d => d.language_codeNavigation)
                    .WithMany(p => p.DepositorSessions)
                    .HasForeignKey(d => d.language_code)
                    .HasConstraintName("FK_DepositorSession_Language");
            });

            modelBuilder.Entity<Device>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.GUIScreen_list).HasDefaultValueSql("((1))");

                entity.Property(e => e.app_key).IsFixedLength();

                entity.Property(e => e.login_attempts).HasComment("how many times in a row a login attempt has failed");

                entity.Property(e => e.login_cycles).HasComment("how many cycles of failed logins have been detected. used to lock the machine in case of password guessing");

                entity.Property(e => e.mac_address).IsFixedLength();

                entity.Property(e => e.transaction_type_list).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.GUIScreen_listNavigation)
                    .WithMany(p => p.Devices)
                    .HasForeignKey(d => d.GUIScreen_list)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceList_GUIScreenList");

                entity.HasOne(d => d.branch)
                    .WithMany(p => p.Devices)
                    .HasForeignKey(d => d.branch_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceList_Branch");

                entity.HasOne(d => d.config_groupNavigation)
                    .WithMany(p => p.Devices)
                    .HasForeignKey(d => d.config_group)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceList_ConfigGroup");

                entity.HasOne(d => d.currency_listNavigation)
                    .WithMany(p => p.Devices)
                    .HasForeignKey(d => d.currency_list)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceList_CurrencyList");

                entity.HasOne(d => d.language_listNavigation)
                    .WithMany(p => p.Devices)
                    .HasForeignKey(d => d.language_list)
                    .HasConstraintName("FK_Device_LanguageList");

                entity.HasOne(d => d.transaction_type_listNavigation)
                    .WithMany(p => p.Devices)
                    .HasForeignKey(d => d.transaction_type_list)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceList_TransactionTypeList");

                entity.HasOne(d => d.type)
                    .WithMany(p => p.Devices)
                    .HasForeignKey(d => d.type_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceList_DeviceType");

                entity.HasOne(d => d.user_groupNavigation)
                    .WithMany(p => p.Devices)
                    .HasForeignKey(d => d.user_group)
                    .HasConstraintName("FK_DeviceList_UserGroup");
            });

            modelBuilder.Entity<DeviceCITSuspenseAccount>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.currency_code).IsFixedLength();

                entity.HasOne(d => d.currency_codeNavigation)
                    .WithMany(p => p.DeviceCITSuspenseAccounts)
                    .HasForeignKey(d => d.currency_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceCITSuspenseAccount_Currency");

                entity.HasOne(d => d.device)
                    .WithMany(p => p.DeviceCITSuspenseAccounts)
                    .HasForeignKey(d => d.device_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceCITSuspenseAccount_Device");
            });

            modelBuilder.Entity<DeviceConfig>(entity =>
            {
                entity.HasComment("Link a Device to its configuration");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.HasOne(d => d.config)
                    .WithMany(p => p.DeviceConfigs)
                    .HasForeignKey(d => d.config_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceConfig_Config");

                entity.HasOne(d => d.group)
                    .WithMany(p => p.DeviceConfigs)
                    .HasForeignKey(d => d.group_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceConfig_ConfigGroup");
            });

            modelBuilder.Entity<DeviceLock>(entity =>
            {
                entity.HasComment("Record device locking and unlocking activity");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.HasOne(d => d.device)
                    .WithMany(p => p.DeviceLocks)
                    .HasForeignKey(d => d.device_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceLock_Device");
            });

            modelBuilder.Entity<DeviceLogin>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.HasOne(d => d.UserNavigation)
                    .WithMany(p => p.DeviceLogins)
                    .HasForeignKey(d => d.User)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceLogin_ApplicationUser");

                entity.HasOne(d => d.device)
                    .WithMany(p => p.DeviceLogins)
                    .HasForeignKey(d => d.device_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceLogin_Device");
            });

            modelBuilder.Entity<DevicePrinter>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.is_infront)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Is the printer in the front i.e. customer facing or in the rear i.e. custodian facing");

                entity.HasOne(d => d.device)
                    .WithMany(p => p.DevicePrinters)
                    .HasForeignKey(d => d.device_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DevicePrinter_DeviceList");
            });

            modelBuilder.Entity<DeviceStatus>(entity =>
            {
                entity.HasComment("Current State of the device");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.ba_currency).IsFixedLength();

                entity.Property(e => e.bag_note_capacity).IsFixedLength();
            });

            modelBuilder.Entity<DeviceSuspenseAccount>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.currency_code).IsFixedLength();

                entity.HasOne(d => d.currency_codeNavigation)
                    .WithMany(p => p.DeviceSuspenseAccounts)
                    .HasForeignKey(d => d.currency_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceSuspenseAccount_Currency");

                entity.HasOne(d => d.device)
                    .WithMany(p => p.DeviceSuspenseAccounts)
                    .HasForeignKey(d => d.device_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceSuspenseAccount_DeviceList");
            });

            modelBuilder.Entity<DeviceType>(entity =>
            {
                entity.HasComment("Describes the type of device");
            });

            modelBuilder.Entity<EscrowJam>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();

                entity.HasOne(d => d.authorising_userNavigation)
                    .WithMany(p => p.EscrowJamauthorising_userNavigations)
                    .HasForeignKey(d => d.authorising_user)
                    .HasConstraintName("FK_EscrowJam_AppUser_Approver");

                entity.HasOne(d => d.initialising_userNavigation)
                    .WithMany(p => p.EscrowJaminitialising_userNavigations)
                    .HasForeignKey(d => d.initialising_user)
                    .HasConstraintName("FK_EscrowJam_AppUser_Initiator");

                entity.HasOne(d => d.transaction)
                    .WithMany(p => p.EscrowJams)
                    .HasForeignKey(d => d.transaction_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EscrowJam_Transaction");
            });

            modelBuilder.Entity<FailedTransactionResult>(entity =>
            {
                entity.Property(e => e.tx_id).ValueGeneratedNever();
            });

            modelBuilder.Entity<GUIPrepopItem>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.enabled).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.valueNavigation)
                    .WithMany(p => p.GUIPrepopItems)
                    .HasForeignKey(d => d.value)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GUIPrepopItem_TextItem");
            });

            modelBuilder.Entity<GUIPrepopList>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.UseDefault).HasDefaultValueSql("((1))");

                entity.Property(e => e.enabled).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<GUIPrepopList_Item>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.HasOne(d => d.ItemNavigation)
                    .WithMany(p => p.GUIPrepopList_Items)
                    .HasForeignKey(d => d.Item)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GUIPrepopList_Item_GUIPrepopItem");

                entity.HasOne(d => d.ListNavigation)
                    .WithMany(p => p.GUIPrepopList_Items)
                    .HasForeignKey(d => d.List)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GUIPrepopList_Item_GUIPrepopList");
            });

            modelBuilder.Entity<GUIScreen>(entity =>
            {
                entity.Property(e => e.prefill_text).HasComment("Text to prefil in the textbox");

                entity.HasOne(d => d.gui_textNavigation)
                    .WithMany(p => p.GUIScreens)
                    .HasForeignKey(d => d.gui_text)
                    .HasConstraintName("FK_GUIScreen_GUIScreenText");

                entity.HasOne(d => d.typeNavigation)
                    .WithMany(p => p.GUIScreens)
                    .HasForeignKey(d => d.type)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GUIScreen_GUIScreenType");
            });

            modelBuilder.Entity<GUIScreenText>(entity =>
            {
                entity.HasComment("Stores the text for a screen for a language");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.guiscreen_id).HasComment("The GUIScreen this entry corresponds to");

                entity.HasOne(d => d.btn_accept_captionNavigation)
                    .WithMany(p => p.GUIScreenTextbtn_accept_captionNavigations)
                    .HasForeignKey(d => d.btn_accept_caption)
                    .HasConstraintName("FK_GUIScreenText_btn_accept_caption");

                entity.HasOne(d => d.btn_back_captionNavigation)
                    .WithMany(p => p.GUIScreenTextbtn_back_captionNavigations)
                    .HasForeignKey(d => d.btn_back_caption)
                    .HasConstraintName("FK_GUIScreenText_btn_back_caption");

                entity.HasOne(d => d.btn_cancel_captionNavigation)
                    .WithMany(p => p.GUIScreenTextbtn_cancel_captionNavigations)
                    .HasForeignKey(d => d.btn_cancel_caption)
                    .HasConstraintName("FK_GUIScreenText_btn_cancel_caption");

                entity.HasOne(d => d.full_instructionsNavigation)
                    .WithMany(p => p.GUIScreenTextfull_instructionsNavigations)
                    .HasForeignKey(d => d.full_instructions)
                    .HasConstraintName("FK_GUIScreenText_full_instructions");

                entity.HasOne(d => d.guiscreen)
                    .WithOne(p => p.GUIScreenText)
                    .HasForeignKey<GUIScreenText>(d => d.guiscreen_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GUIScreenText_GUIScreen");

                entity.HasOne(d => d.screen_titleNavigation)
                    .WithMany(p => p.GUIScreenTextscreen_titleNavigations)
                    .HasForeignKey(d => d.screen_title)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GUIScreenText_screen_title");

                entity.HasOne(d => d.screen_title_instructionNavigation)
                    .WithMany(p => p.GUIScreenTextscreen_title_instructionNavigations)
                    .HasForeignKey(d => d.screen_title_instruction)
                    .HasConstraintName("FK_GUIScreenText_screen_title_instruction");
            });

            modelBuilder.Entity<GuiScreenList_Screen>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.HasOne(d => d.gui_screen_listNavigation)
                    .WithMany(p => p.GuiScreenList_Screens)
                    .HasForeignKey(d => d.gui_screen_list)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GuiScreenList_Screen_GUIScreenList");

                entity.HasOne(d => d.guiprepoplist)
                    .WithMany(p => p.GuiScreenList_Screens)
                    .HasForeignKey(d => d.guiprepoplist_id)
                    .HasConstraintName("FK_GuiScreenList_Screen_GUIPrepopList");

                entity.HasOne(d => d.screenNavigation)
                    .WithMany(p => p.GuiScreenList_Screens)
                    .HasForeignKey(d => d.screen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GuiScreenList_Screen_GUIScreen");

                entity.HasOne(d => d.validation_list)
                    .WithMany(p => p.GuiScreenList_Screens)
                    .HasForeignKey(d => d.validation_list_id)
                    .HasConstraintName("FK_GuiScreenList_Screen_ValidationList");
            });

            modelBuilder.Entity<Language>(entity =>
            {
                entity.HasKey(e => e.code)
                    .HasName("PK_Languages");

                entity.HasComment("Available languages in the system");

                entity.Property(e => e.code).IsFixedLength();

                entity.Property(e => e.enabled).HasComment("whether the system supports the language");

                entity.Property(e => e.flag).HasComment("two character country code for the national flag to display for the language");
            });

            modelBuilder.Entity<LanguageList>(entity =>
            {
                entity.HasComment("A list of languages a device supports");

                entity.Property(e => e.default_language).IsFixedLength();

                entity.Property(e => e.enabled).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.default_languageNavigation)
                    .WithMany(p => p.LanguageLists)
                    .HasForeignKey(d => d.default_language)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LanguageList_Language");
            });

            modelBuilder.Entity<LanguageList_Language>(entity =>
            {
                entity.HasComment("[m2m] LanguageList and Language");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.language_item).IsFixedLength();

                entity.HasOne(d => d.language_itemNavigation)
                    .WithMany(p => p.LanguageList_Languages)
                    .HasForeignKey(d => d.language_item)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LanguageList_Language_Language");

                entity.HasOne(d => d.language_listNavigation)
                    .WithMany(p => p.LanguageList_Languages)
                    .HasForeignKey(d => d.language_list)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LanguageList_Language_LanguageList");
            });

            modelBuilder.Entity<MakerTypePermissionObject>(entity =>
            {
                entity.Property(e => e.Oid).ValueGeneratedNever();

                entity.HasOne(d => d.OidNavigation)
                    .WithOne(p => p.MakerTypePermissionObject)
                    .HasForeignKey<MakerTypePermissionObject>(d => d.Oid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MakerTypePermissionObject_Oid");
            });

            modelBuilder.Entity<ModelDifference>(entity =>
            {
                entity.Property(e => e.Oid).ValueGeneratedNever();
            });

            modelBuilder.Entity<ModelDifferenceAspect>(entity =>
            {
                entity.Property(e => e.Oid).ValueGeneratedNever();

                entity.HasOne(d => d.OwnerNavigation)
                    .WithMany(p => p.ModelDifferenceAspects)
                    .HasForeignKey(d => d.Owner)
                    .HasConstraintName("FK_ModelDifferenceAspect_Owner");
            });

            modelBuilder.Entity<PasswordHistory>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.HasOne(d => d.UserNavigation)
                    .WithMany(p => p.PasswordHistories)
                    .HasForeignKey(d => d.User)
                    .HasConstraintName("FK_PasswordHistory_User");
            });

            modelBuilder.Entity<PasswordPolicy>(entity =>
            {
                entity.HasComment("The system password policy");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.use_history).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Permission>(entity =>
            {
                entity.HasComment("grant a role to perform an activity");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.HasOne(d => d.activity)
                    .WithMany(p => p.Permissions)
                    .HasForeignKey(d => d.activity_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Permission_Activity");

                entity.HasOne(d => d.role)
                    .WithMany(p => p.Permissions)
                    .HasForeignKey(d => d.role_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Permission_Role");
            });

            modelBuilder.Entity<PermissionPolicyMemberPermissionsObject>(entity =>
            {
                entity.Property(e => e.Oid).ValueGeneratedNever();

                entity.HasOne(d => d.TypePermissionObjectNavigation)
                    .WithMany(p => p.PermissionPolicyMemberPermissionsObjects)
                    .HasForeignKey(d => d.TypePermissionObject)
                    .HasConstraintName("FK_PermissionPolicyMemberPermissionsObject_TypePermissionObject");
            });

            modelBuilder.Entity<PermissionPolicyNavigationPermissionsObject>(entity =>
            {
                entity.Property(e => e.Oid).ValueGeneratedNever();

                entity.HasOne(d => d.RoleNavigation)
                    .WithMany(p => p.PermissionPolicyNavigationPermissionsObjects)
                    .HasForeignKey(d => d.Role)
                    .HasConstraintName("FK_PermissionPolicyNavigationPermissionsObject_Role");
            });

            modelBuilder.Entity<PermissionPolicyObjectPermissionsObject>(entity =>
            {
                entity.Property(e => e.Oid).ValueGeneratedNever();

                entity.HasOne(d => d.TypePermissionObjectNavigation)
                    .WithMany(p => p.PermissionPolicyObjectPermissionsObjects)
                    .HasForeignKey(d => d.TypePermissionObject)
                    .HasConstraintName("FK_PermissionPolicyObjectPermissionsObject_TypePermissionObject");
            });

            modelBuilder.Entity<PermissionPolicyRole>(entity =>
            {
                entity.Property(e => e.Oid).ValueGeneratedNever();

                entity.HasOne(d => d.ObjectTypeNavigation)
                    .WithMany(p => p.PermissionPolicyRoles)
                    .HasForeignKey(d => d.ObjectType)
                    .HasConstraintName("FK_PermissionPolicyRole_ObjectType");
            });

            modelBuilder.Entity<PermissionPolicyTypePermissionsObject>(entity =>
            {
                entity.Property(e => e.Oid).ValueGeneratedNever();

                entity.HasOne(d => d.ObjectTypeNavigation)
                    .WithMany(p => p.PermissionPolicyTypePermissionsObjects)
                    .HasForeignKey(d => d.ObjectType)
                    .HasConstraintName("FK_PermissionPolicyTypePermissionsObject_ObjectType");

                entity.HasOne(d => d.RoleNavigation)
                    .WithMany(p => p.PermissionPolicyTypePermissionsObjects)
                    .HasForeignKey(d => d.Role)
                    .HasConstraintName("FK_PermissionPolicyTypePermissionsObject_Role");
            });

            modelBuilder.Entity<PermissionPolicyUser>(entity =>
            {
                entity.Property(e => e.Oid).ValueGeneratedNever();
            });

            modelBuilder.Entity<PermissionPolicyUserUsers_PermissionPolicyRoleRole>(entity =>
            {
                entity.Property(e => e.OID).ValueGeneratedNever();

                entity.HasOne(d => d.RolesNavigation)
                    .WithMany(p => p.PermissionPolicyUserUsers_PermissionPolicyRoleRoles)
                    .HasForeignKey(d => d.Roles)
                    .HasConstraintName("FK_PermissionPolicyUserUsers_PermissionPolicyRoleRoles_Roles");

                entity.HasOne(d => d.UsersNavigation)
                    .WithMany(p => p.PermissionPolicyUserUsers_PermissionPolicyRoleRoles)
                    .HasForeignKey(d => d.Users)
                    .HasConstraintName("FK_PermissionPolicyUserUsers_PermissionPolicyRoleRoles_Users");
            });

            modelBuilder.Entity<PingResponse>(entity =>
            {
                entity.HasKey(e => e.ServerName)
                    .HasName("PK_PingResponse_1");
            });

            modelBuilder.Entity<PostRequest>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();
            });

            modelBuilder.Entity<PostResponse>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();
            });

            modelBuilder.Entity<PrinterStatus>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.modified).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Printout>(entity =>
            {
                entity.HasComment("Stores contents of a printout for a transaction");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.datetime).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.tx)
                    .WithMany(p => p.Printouts)
                    .HasForeignKey(d => d.tx_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Printout_Transaction");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.HasComment("a user's role storing all their permissions");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");
            });

            modelBuilder.Entity<SMSRequest>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();
            });

            modelBuilder.Entity<SMSResponse>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();
            });

            modelBuilder.Entity<SessionException>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");
            });

            modelBuilder.Entity<TextItem>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.HasOne(d => d.CategoryNavigation)
                    .WithMany(p => p.TextItems)
                    .HasForeignKey(d => d.Category)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UI_TextItem_TextItemCategory");

                entity.HasOne(d => d.TextItemType)
                    .WithMany(p => p.TextItems)
                    .HasForeignKey(d => d.TextItemTypeID)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_UI_TextItem_TextItemType");
            });

            modelBuilder.Entity<TextItemCategory>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.HasOne(d => d.ParentNavigation)
                    .WithMany(p => p.InverseParentNavigation)
                    .HasForeignKey(d => d.Parent)
                    .HasConstraintName("FK_UI_TextItemCategory_TextItemCategory");
            });

            modelBuilder.Entity<TextItemType>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TextTranslation>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.LanguageCode).IsFixedLength();

                entity.HasOne(d => d.LanguageCodeNavigation)
                    .WithMany(p => p.TextTranslations)
                    .HasForeignKey(d => d.LanguageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UI_Translation_Language");

                entity.HasOne(d => d.TextItem)
                    .WithMany(p => p.TextTranslations)
                    .HasForeignKey(d => d.TextItemID)
                    .HasConstraintName("FK_UI_Translation_TextItem");
            });

            modelBuilder.Entity<ThisDevice>(entity =>
            {
                entity.ToView("ThisDevice");
            });

            modelBuilder.Entity<Transaction>(entity =>
            {
                entity.HasComment("Stores the summary of a transaction attempt. A transaction can have various stages of completion if an error is encountered.");

                entity.Property(e => e.id)
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasComment("Globally Unique Identifier for replication");

                entity.Property(e => e.cb_account_name).HasComment("The account name returned by core banking.");

                entity.Property(e => e.cb_date).HasComment("Core banking returned transaction date and time");

                entity.Property(e => e.cb_ref_account_name).HasComment("Core banking returned Reference Account Name if any following a validation request for a Reference Account Number");

                entity.Property(e => e.cb_status_detail).HasComment("Additional status details returned by core banking e.g. 'Amount must be less that MAX_AMOUNT'");

                entity.Property(e => e.cb_tx_number).HasComment("Core banking returned transaction number");

                entity.Property(e => e.cb_tx_status).HasComment("Core banking returned transaction status e.g. SUCCESS or FAILURE");

                entity.Property(e => e.session_id).HasComment("The session this transaction fullfills");

                entity.Property(e => e.tx_account_number).HasComment("Account Number for crediting. This can be a suspense account");

                entity.Property(e => e.tx_completed).HasComment("Indicate if the transaction has completed or is in progress");

                entity.Property(e => e.tx_currency)
                    .IsFixedLength()
                    .HasComment("User selected currency. A transaction can only have one currency at a time");

                entity.Property(e => e.tx_depositor_name).HasComment("Customer's name");

                entity.Property(e => e.tx_end_date).HasComment("The date and time the transaction was recorded in the database. Can be different from core banking's transaction date");

                entity.Property(e => e.tx_error_code).HasComment("Last error code encountered during the transaction");

                entity.Property(e => e.tx_error_message).HasComment("Last error message encountered during the transaction");

                entity.Property(e => e.tx_id_number).HasComment("Customer's ID number");

                entity.Property(e => e.tx_narration).HasComment("The narration from the deposit slip. Usually set to 16 characters in core banking");

                entity.Property(e => e.tx_phone).HasComment("Customer entered phone number");

                entity.Property(e => e.tx_ref_account).HasComment("Used for double validation transactions where the user enters a second account number. E.g Mpesa Agent Number");

                entity.Property(e => e.tx_result).HasComment("Boolean for if the transaction succeeded 100% without encountering a critical terminating error");

                entity.Property(e => e.tx_start_date).HasComment("The date and time the transaction was recorded in the database. Can be different from core banking's transaction date");

                entity.Property(e => e.tx_type).HasComment("The transaction type chosen by the user from TransactionTypeListItem");

                entity.HasOne(d => d.auth_userNavigation)
                    .WithMany(p => p.Transactionauth_userNavigations)
                    .HasForeignKey(d => d.auth_user)
                    .HasConstraintName("FK_Transaction_auth_user");

                entity.HasOne(d => d.cit)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.cit_id)
                    .HasConstraintName("FK_Transaction_CIT");

                entity.HasOne(d => d.device)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.device_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Transaction_DeviceList");

                entity.HasOne(d => d.init_userNavigation)
                    .WithMany(p => p.Transactioninit_userNavigations)
                    .HasForeignKey(d => d.init_user)
                    .HasConstraintName("FK_Transaction_init_user");

                entity.HasOne(d => d.session)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.session_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Transaction_DepositorSession");

                entity.HasOne(d => d.tx_currencyNavigation)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.tx_currency)
                    .HasConstraintName("FK_Transaction_Currency_Transaction");

                entity.HasOne(d => d.tx_typeNavigation)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.tx_type)
                    .HasConstraintName("FK_Transaction_TransactionTypeListItem");
            });

            modelBuilder.Entity<TransactionException>(entity =>
            {
                entity.HasComment("Exceptions encountered during execution");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");
            });

            modelBuilder.Entity<TransactionLimitList>(entity =>
            {
                entity.HasComment("Sets the transaction limit amounts for each currency");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");
            });

            modelBuilder.Entity<TransactionLimitListItem>(entity =>
            {
                entity.HasComment("Limit values for each currency");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.currency_code)
                    .IsFixedLength()
                    .HasComment("ISO 4217 Three Character Currency Code");

                entity.Property(e => e.funds_source_amount).HasComment("The amount after which the Source of Funds screen will be shown");

                entity.Property(e => e.overdeposit_amount).HasComment("The amount after which the CDM will disable the counter");

                entity.Property(e => e.prevent_overdeposit).HasComment("CDM will not accept further deposits past the maximum");

                entity.Property(e => e.prevent_underdeposit).HasDefaultValueSql("((1))");

                entity.Property(e => e.show_funds_source).HasComment("Whether to show the source of funds screen after deposit limit is reached or passed");

                entity.HasOne(d => d.currency_codeNavigation)
                    .WithMany(p => p.TransactionLimitListItems)
                    .HasForeignKey(d => d.currency_code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionLimitListItem_Currency");

                entity.HasOne(d => d.transactionitemlist)
                    .WithMany(p => p.TransactionLimitListItems)
                    .HasForeignKey(d => d.transactionitemlist_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionLimitListItem_TransactionLimitList");
            });

            modelBuilder.Entity<TransactionPosting>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();

                entity.Property(e => e.cr_currency).IsFixedLength();

                entity.Property(e => e.dr_currency).IsFixedLength();

                entity.HasOne(d => d.authorising_userNavigation)
                    .WithMany(p => p.TransactionPostingauthorising_userNavigations)
                    .HasForeignKey(d => d.authorising_user)
                    .HasConstraintName("FK_DevicePosting_authorising_user");

                entity.HasOne(d => d.initialising_userNavigation)
                    .WithMany(p => p.TransactionPostinginitialising_userNavigations)
                    .HasForeignKey(d => d.initialising_user)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DevicePosting_initialising_user");

                entity.HasOne(d => d.tx)
                    .WithMany(p => p.TransactionPostings)
                    .HasForeignKey(d => d.tx_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DevicePosting_Transaction");
            });

            modelBuilder.Entity<TransactionText>(entity =>
            {
                entity.HasComment("Stores the multi language texts for a tx");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.HasOne(d => d.full_instructionsNavigation)
                    .WithMany(p => p.TransactionTextfull_instructionsNavigations)
                    .HasForeignKey(d => d.full_instructions)
                    .HasConstraintName("FK_TransactionText_full_instructions");

                entity.HasOne(d => d.tx_itemNavigation)
                    .WithOne(p => p.TransactionText)
                    .HasForeignKey<TransactionText>(d => d.tx_item)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionText_TransactionTypeListItem");
            });

            modelBuilder.Entity<TransactionType>(entity =>
            {
                entity.HasComment("");

                entity.Property(e => e.code).HasComment("Vendor supplied ScreenType GUID");

                entity.Property(e => e.description).HasComment("common description for the transaction type");

                entity.Property(e => e.name).HasComment("common name for the transaction e.g. Mpesa Deposit");
            });

            modelBuilder.Entity<TransactionTypeListItem>(entity =>
            {
                entity.HasComment("Transactions that the system can perform e.g. regular deposit, Mpesa deposit, etc");

                entity.Property(e => e.cb_tx_type).HasComment("A string passed to core banking with transaction details so core banking can route the deposit to the correct handler");

                entity.Property(e => e.default_account).HasComment("the default account that pre-polulates the AccountNumber of a transaction");

                entity.Property(e => e.default_account_currency)
                    .HasDefaultValueSql("('KES')")
                    .IsFixedLength();

                entity.Property(e => e.description).HasComment("common description for the transaction type");

                entity.Property(e => e.enabled).HasDefaultValueSql("((1))");

                entity.Property(e => e.name).HasComment("common name for the transaction e.g. Mpesa Deposit");

                entity.Property(e => e.tx_type_guiscreenlist).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.account_permissionNavigation)
                    .WithMany(p => p.TransactionTypeListItems)
                    .HasForeignKey(d => d.account_permission)
                    .HasConstraintName("FK_TransactionTypeListItem_AccountPermission");

                entity.HasOne(d => d.default_account_currencyNavigation)
                    .WithMany(p => p.TransactionTypeListItems)
                    .HasForeignKey(d => d.default_account_currency)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionTypeListItem_Currency");

                entity.HasOne(d => d.tx_limit_listNavigation)
                    .WithMany(p => p.TransactionTypeListItems)
                    .HasForeignKey(d => d.tx_limit_list)
                    .HasConstraintName("FK_TransactionTypeListItem_TransactionLimitList");

                entity.HasOne(d => d.tx_textNavigation)
                    .WithMany(p => p.TransactionTypeListItems)
                    .HasForeignKey(d => d.tx_text)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_TransactionTypeListItem_TransactionText");

                entity.HasOne(d => d.tx_typeNavigation)
                    .WithMany(p => p.TransactionTypeListItems)
                    .HasForeignKey(d => d.tx_type)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionListItem_TransactionType");

                entity.HasOne(d => d.tx_type_guiscreenlistNavigation)
                    .WithMany(p => p.TransactionTypeListItems)
                    .HasForeignKey(d => d.tx_type_guiscreenlist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionTypeListItem_GUIScreenList");
            });

            modelBuilder.Entity<TransactionTypeList_TransactionTypeListItem>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.HasOne(d => d.txtype_listNavigation)
                    .WithMany(p => p.TransactionTypeList_TransactionTypeListItems)
                    .HasForeignKey(d => d.txtype_list)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionTypeList_TransactionTypeListItem_TransactionTypeList");

                entity.HasOne(d => d.txtype_list_itemNavigation)
                    .WithMany(p => p.TransactionTypeList_TransactionTypeListItems)
                    .HasForeignKey(d => d.txtype_list_item)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransactionTypeList_TransactionTypeListItem_TransactionTypeListItem");
            });

            modelBuilder.Entity<TransactionView>(entity =>
            {
                entity.ToView("TransactionView");

                entity.Property(e => e.Currency).IsFixedLength();
            });

            modelBuilder.Entity<UserGroup>(entity =>
            {
                entity.HasComment("groups together users ho have privileges on the same machine");

                entity.HasOne(d => d.parent_groupNavigation)
                    .WithMany(p => p.Inverseparent_groupNavigation)
                    .HasForeignKey(d => d.parent_group)
                    .HasConstraintName("FK_UserGroup_UserGroup");
            });

            modelBuilder.Entity<UserLock>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.HasOne(d => d.ApplicationUserLoginDetailNavigation)
                    .WithMany(p => p.UserLocks)
                    .HasForeignKey(d => d.ApplicationUserLoginDetail)
                    .HasConstraintName("FK_UserLock_ApplicationUserLoginDetail");

                entity.HasOne(d => d.InitiatingUserNavigation)
                    .WithMany(p => p.UserLocks)
                    .HasForeignKey(d => d.InitiatingUser)
                    .HasConstraintName("FK_UserLock_InitiatingUser");
            });

            modelBuilder.Entity<ValidateAccountRequest>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();
            });

            modelBuilder.Entity<ValidateAccountResponse>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();
            });

            modelBuilder.Entity<ValidateReferenceAccountRequest>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();
            });

            modelBuilder.Entity<ValidateReferenceAccountResponse>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();
            });

            modelBuilder.Entity<ValidationItem>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.description).HasComment("common description for the transaction type");

                entity.Property(e => e.name).HasComment("common name for the transaction e.g. Mpesa Deposit");

                entity.HasOne(d => d.type)
                    .WithMany(p => p.ValidationItems)
                    .HasForeignKey(d => d.type_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValidationItem_ValidationType");

                entity.HasOne(d => d.validation_text)
                    .WithMany(p => p.ValidationItems)
                    .HasForeignKey(d => d.validation_text_id)
                    .HasConstraintName("FK_ValidationItem_ValidationText");
            });

            modelBuilder.Entity<ValidationItemValue>(entity =>
            {
                entity.HasComment("Individual values for the validation");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.HasOne(d => d.validation_item)
                    .WithMany(p => p.ValidationItemValues)
                    .HasForeignKey(d => d.validation_item_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValidationItemValue_ValidationItem");
            });

            modelBuilder.Entity<ValidationList>(entity =>
            {
                entity.HasComment("List of validations to be performed on a field");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.description).HasComment("common description for the transaction type");

                entity.Property(e => e.name).HasComment("common name for the transaction e.g. Mpesa Deposit");
            });

            modelBuilder.Entity<ValidationList_ValidationItem>(entity =>
            {
                entity.HasComment("Link a ValidationItem to a ValidationList");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.enabled).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.validation_item)
                    .WithMany(p => p.ValidationList_ValidationItems)
                    .HasForeignKey(d => d.validation_item_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValidationList_ValidationItem_ValidationItem");

                entity.HasOne(d => d.validation_list)
                    .WithMany(p => p.ValidationList_ValidationItems)
                    .HasForeignKey(d => d.validation_list_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValidationList_ValidationItem_ValidationList");
            });

            modelBuilder.Entity<ValidationText>(entity =>
            {
                entity.HasComment("Multilanguage validation result text");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.HasOne(d => d.validation_item)
                    .WithMany(p => p.ValidationTexts)
                    .HasForeignKey(d => d.validation_item_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValidationText_ValidationItem");
            });

            modelBuilder.Entity<ValidationType>(entity =>
            {
                entity.HasComment("The type of validation e.g. regex, etc");

                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.description).HasComment("common description for the transaction type");

                entity.Property(e => e.name).HasComment("common name for the transaction e.g. Mpesa Deposit");
            });

            modelBuilder.Entity<WebPortalLogin>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();

                entity.HasOne(d => d.ApplicationUserLoginDetailNavigation)
                    .WithMany(p => p.WebPortalLogins)
                    .HasForeignKey(d => d.ApplicationUserLoginDetail)
                    .HasConstraintName("FK_WebPortalLogin_ApplicationUserLoginDetail");
            });

            modelBuilder.Entity<WebPortalRole>(entity =>
            {
                entity.Property(e => e.Oid).ValueGeneratedNever();

                entity.HasOne(d => d.OidNavigation)
                    .WithOne(p => p.WebPortalRole)
                    .HasForeignKey<WebPortalRole>(d => d.Oid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WebPortalRole_Oid");
            });

            modelBuilder.Entity<WebPortalRoleRoles_ApplicationUserApplicationUser>(entity =>
            {
                entity.Property(e => e.OID).ValueGeneratedNever();

                entity.HasOne(d => d.ApplicationUsersNavigation)
                    .WithMany(p => p.WebPortalRoleRoles_ApplicationUserApplicationUsers)
                    .HasForeignKey(d => d.ApplicationUsers)
                    .HasConstraintName("FK_WebPortalRoleRoles_ApplicationUserApplicationUsers_ApplicationUsers");

                entity.HasOne(d => d.RolesNavigation)
                    .WithMany(p => p.WebPortalRoleRoles_ApplicationUserApplicationUsers)
                    .HasForeignKey(d => d.Roles)
                    .HasConstraintName("FK_WebPortalRoleRoles_ApplicationUserApplicationUsers_Roles");
            });

            modelBuilder.Entity<WebUserLoginCount>(entity =>
            {
                entity.Property(e => e.Oid).ValueGeneratedNever();
            });

            modelBuilder.Entity<WebUserPasswordHistory>(entity =>
            {
                entity.Property(e => e.Oid).ValueGeneratedNever();
            });

            modelBuilder.Entity<XPWeakReference>(entity =>
            {
                entity.Property(e => e.Oid).ValueGeneratedNever();

                entity.HasOne(d => d.ObjectTypeNavigation)
                    .WithMany(p => p.XPWeakReferenceObjectTypeNavigations)
                    .HasForeignKey(d => d.ObjectType)
                    .HasConstraintName("FK_XPWeakReference_ObjectType");

                entity.HasOne(d => d.TargetTypeNavigation)
                    .WithMany(p => p.XPWeakReferenceTargetTypeNavigations)
                    .HasForeignKey(d => d.TargetType)
                    .HasConstraintName("FK_XPWeakReference_TargetType");
            });

            modelBuilder.Entity<sysTextItem>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.HasOne(d => d.CategoryNavigation)
                    .WithMany(p => p.sysTextItems)
                    .HasForeignKey(d => d.Category)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SysTextItem_SysTextItemCategory");

                entity.HasOne(d => d.TextItemType)
                    .WithMany(p => p.sysTextItems)
                    .HasForeignKey(d => d.TextItemTypeID)
                    .HasConstraintName("FK_sysTextItem_sysTextItemType");
            });

            modelBuilder.Entity<sysTextItemCategory>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.HasOne(d => d.ParentNavigation)
                    .WithMany(p => p.InverseParentNavigation)
                    .HasForeignKey(d => d.Parent)
                    .HasConstraintName("FK_TextItemCategory_TextItemCategory");
            });

            modelBuilder.Entity<sysTextItemType>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<sysTextTranslation>(entity =>
            {
                entity.Property(e => e.id).HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.LanguageCode).IsFixedLength();

                entity.HasOne(d => d.LanguageCodeNavigation)
                    .WithMany(p => p.sysTextTranslations)
                    .HasForeignKey(d => d.LanguageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_sysTextTranslation_Language");

                entity.HasOne(d => d.SysTextItem)
                    .WithMany(p => p.sysTextTranslations)
                    .HasForeignKey(d => d.SysTextItemID)
                    .HasConstraintName("FK_sysTextTranslation_sysTextItem");
            });

            modelBuilder.Entity<viewCITRepostAuthPending>(entity =>
            {
                entity.ToView("viewCITRepostAuthPending");

                entity.Property(e => e.currency).IsFixedLength();
            });

            modelBuilder.Entity<viewCITRepostFailedPostTransaction>(entity =>
            {
                entity.ToView("viewCITRepostFailedPostTransaction");

                entity.Property(e => e.currency).IsFixedLength();
            });

            modelBuilder.Entity<viewConfig>(entity =>
            {
                entity.ToView("viewConfig");
            });

            modelBuilder.Entity<viewPermission>(entity =>
            {
                entity.ToView("viewPermissions");
            });

            modelBuilder.Entity<viewRepostAuthPending>(entity =>
            {
                entity.ToView("viewRepostAuthPending");

                entity.Property(e => e.tx_currency).IsFixedLength();
            });

            modelBuilder.Entity<viewRepostFailedPostTransaction>(entity =>
            {
                entity.ToView("viewRepostFailedPostTransaction");

                entity.Property(e => e.tx_currency).IsFixedLength();
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingGeneratedFunctions(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);




    }

}